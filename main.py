import asyncio
import logging
import os

from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from dotenv import load_dotenv

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

load_dotenv()

# –¢–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
BOT_TOKEN = os.getenv("BOT_TOKEN")
if not BOT_TOKEN:
    raise ValueError("BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")

DOCTOR_ID = os.getenv("DOCTOR_ID")
if not DOCTOR_ID:
    raise ValueError("DOCTOR_ID –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)


# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM
class BMIStates(StatesGroup):
    waiting_for_weight = State()
    waiting_for_height = State()


# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –Ω–∞—á–∞–ª–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è
def get_start_keyboard():
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ò–∑–º–µ—Ä–∏—Ç—å –ò–ú–¢", callback_data="measure_bmi")]
    ])
    return keyboard


# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
def get_ok_keyboard():
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="OK", callback_data="ok")]
    ])
    return keyboard


# –§—É–Ω–∫—Ü–∏—è —Ä–∞—Å—á–µ—Ç–∞ –ò–ú–¢ –∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
def calculate_bmi(weight, height):
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ä–æ—Å—Ç –∏–∑ —Å–º –≤ –º–µ—Ç—Ä—ã
    height_m = height / 100
    bmi = weight / (height_m ** 2)

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
    if bmi < 16:
        category = "–í—ã—Ä–∞–∂–µ–Ω–Ω—ã–π –¥–µ—Ñ–∏—Ü–∏—Ç –º–∞—Å—Å—ã —Ç–µ–ª–∞"
    elif 16 <= bmi < 18.5:
        category = "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–∞—è –º–∞—Å—Å–∞ —Ç–µ–ª–∞"
    elif 18.5 <= bmi < 25:
        category = "–ù–æ—Ä–º–∞–ª—å–Ω–∞—è –º–∞—Å—Å–∞ —Ç–µ–ª–∞"
    elif 25 <= bmi < 30:
        category = "–ò–∑–±—ã—Ç–æ—á–Ω–∞—è –º–∞—Å—Å–∞ —Ç–µ–ª–∞"
    elif 30 <= bmi < 35:
        category = "–û–∂–∏—Ä–µ–Ω–∏–µ 1 —Å—Ç–µ–ø–µ–Ω–∏"
    elif 35 <= bmi < 40:
        category = "–û–∂–∏—Ä–µ–Ω–∏–µ 2 —Å—Ç–µ–ø–µ–Ω–∏"
    else:
        category = "–û–∂–∏—Ä–µ–Ω–∏–µ 3 —Å—Ç–µ–ø–µ–Ω–∏"

    return round(bmi, 2), category


def calculate_weight_plan(current_weight, height):
    # –†–∞—Å—á–µ—Ç –∏–¥–µ–∞–ª—å–Ω–æ–≥–æ –≤–µ—Å–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ü–µ–ª–µ–≤–æ–≥–æ –ò–ú–¢ = 25
    # –ò–ú–¢ = –≤–µ—Å / (—Ä–æ—Å—Ç –≤ –º–µ—Ç—Ä–∞—Ö)^2
    # –¶–µ–ª–µ–≤–æ–π –≤–µ—Å = 25 * (—Ä–æ—Å—Ç –≤ –º–µ—Ç—Ä–∞—Ö)^2
    height_m = height / 100  # –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å–º –≤ –º–µ—Ç—Ä—ã
    ideal_weight = 25 * (height_m ** 2)

    # –ò–∑–±—ã—Ç–æ–∫ –≤–µ—Å–∞
    excess_weight = current_weight - ideal_weight

    # –ü–ª–∞–Ω–∏—Ä—É–µ–º–æ–µ —Å–Ω–∏–∂–µ–Ω–∏–µ –≤–µ—Å–∞ –ø–æ—Å–ª–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ (60-80% –æ—Ç –∏–∑–±—ã—Ç–∫–∞)
    min_weight_loss = excess_weight * 0.6
    max_weight_loss = excess_weight * 0.8

    return ideal_weight, excess_weight, min_weight_loss, max_weight_loss

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    welcome_text = (
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –ò–Ω–¥–µ–∫—Å–∞ –ú–∞—Å—Å—ã –¢–µ–ª–∞ (–ò–ú–¢)!\n\n"
        "üìä <b>–ß—Ç–æ —Ç–∞–∫–æ–µ –ò–ú–¢?</b>\n"
        "–ò–ú–¢ - —ç—Ç–æ –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –≤–µ—Å–∞ –∏ —Ä–æ—Å—Ç–∞ —á–µ–ª–æ–≤–µ–∫–∞, "
        "–∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–≥–∞–µ—Ç –æ—Ü–µ–Ω–∏—Ç—å, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –º–∞—Å—Å–∞ —Ç–µ–ª–∞ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–π, "
        "–Ω–æ—Ä–º–∞–ª—å–Ω–æ–π –∏–ª–∏ –∏–∑–±—ã—Ç–æ—á–Ω–æ–π.\n\n"
        "üí° <b>–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç?</b>\n"
        "1. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–ò–∑–º–µ—Ä–∏—Ç—å –ò–ú–¢'\n"
        "2. –í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –≤–µ—Å –≤ –∫–∏–ª–æ–≥—Ä–∞–º–º–∞—Ö\n"
        "3. –í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π —Ä–æ—Å—Ç –≤ —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä–∞—Ö\n"
        "4. –ü–æ–ª—É—á–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–µ–π\n\n"
        "üöÄ <b>–ù–∞—á–Ω–∏—Ç–µ —Å–µ–π—á–∞—Å!</b>"
    )
    await message.answer(
        welcome_text,
        parse_mode="HTML",
        reply_markup=get_start_keyboard()
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–ò–∑–º–µ—Ä–∏—Ç—å –ò–ú–¢"
@dp.callback_query(lambda c: c.data == "measure_bmi")
async def process_measure_bmi(callback_query: types.CallbackQuery, state: FSMContext):
    # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫—É –∏–∑ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    await callback_query.message.edit_reply_markup(reply_markup=None)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–ø—Ä–æ—Å–æ–º –≤–µ—Å–∞
    await callback_query.message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–µ—Å –≤ –∫–∏–ª–æ–≥—Ä–∞–º–º–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä: 65):",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="cancel")]
        ])
    )
    await state.set_state(BMIStates.waiting_for_weight)
    await callback_query.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã
@dp.callback_query(lambda c: c.data == "cancel")
async def process_cancel(callback_query: types.CallbackQuery, state: FSMContext):
    await state.clear()
    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–ø—Ä–æ—Å–æ–º –≤–µ—Å–∞/—Ä–æ—Å—Ç–∞
    await callback_query.message.edit_text(
        "–ò–∑–º–µ—Ä–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ:",
        reply_markup=get_start_keyboard()
    )
    await callback_query.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –≤–µ—Å–∞
@dp.message(BMIStates.waiting_for_weight)
async def process_weight(message: types.Message, state: FSMContext):
    try:
        weight = float(message.text.replace(',', '.'))
        if weight <= 0 or weight > 300:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–µ—Å (–æ—Ç 1 –¥–æ 300 –∫–≥):")
            return

        await state.update_data(weight=weight)
        await message.answer("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ä–æ—Å—Ç –≤ —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä: 175):")
        await state.set_state(BMIStates.waiting_for_height)

    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–µ—Å —á–∏—Å–ª–æ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä: 65 –∏–ª–∏ 65.5):")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ —Ä–æ—Å—Ç–∞
@dp.message(BMIStates.waiting_for_height)
async def process_height(message: types.Message, state: FSMContext):
    try:
        height = float(message.text.replace(',', '.'))
        if height <= 0 or height > 250:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ä–æ—Å—Ç (–æ—Ç 1 –¥–æ 250 —Å–º):")
            return

        user_data = await state.get_data()
        weight = user_data['weight']

        # –†–∞—Å—á–µ—Ç –ò–ú–¢
        bmi, category = calculate_bmi(weight, height)

        result_text = (
            f"üìä <b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞—Å—á–µ—Ç–∞ –ò–ú–¢:</b>\n\n"
            f"‚öñÔ∏è –í–µ—Å: {weight} –∫–≥\n"
            f"üìè –†–æ—Å—Ç: {height} —Å–º\n"
            f"üî¢ –ò–ú–¢: {bmi}\n"
            f"üìà –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}\n\n"
        )

        # –†–∞—Å—á–µ—Ç –ø–ª–∞–Ω–∞ —Å–Ω–∏–∂–µ–Ω–∏—è –≤–µ—Å–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –æ–∂–∏—Ä–µ–Ω–∏—è
        if bmi >= 30:
            ideal_weight, excess_weight, min_weight_loss, max_weight_loss = calculate_weight_plan(weight, height)

            result_text += (
                f"üéØ <b>–ò–¥–µ–∞–ª—å–Ω—ã–π –≤–µ—Å:</b> {ideal_weight:.1f} –∫–≥\n"
                f"üìä <b>–ò–∑–±—ã—Ç–æ–∫ –≤–µ—Å–∞:</b> {excess_weight:.1f} –∫–≥\n\n"
                f"üìã <b>–ü–ª–∞–Ω–∏—Ä—É–µ–º–æ–µ —Å–Ω–∏–∂–µ–Ω–∏–µ –≤–µ—Å–∞ –ø–æ—Å–ª–µ –æ–ø–µ—Ä–∞—Ü–∏–∏:</b> "
                f"{min_weight_loss:.1f} - {max_weight_loss:.1f} –∫–≥\n"
                f"<i>(60-80% –æ—Ç –∏–∑–±—ã—Ç–æ—á–Ω–æ–≥–æ –≤–µ—Å–∞)</i>\n\n"
                f"üí° <b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:</b>\n"
                f'–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø—Ä–æ–∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è —Å <a href="tg://user?id={DOCTOR_ID}">–≤—Ä–∞—á–æ–º</a> –æ –ø—Ä–æ–≥—Ä–∞–º–º–µ —Å–Ω–∏–∂–µ–Ω–∏—è –≤–µ—Å–∞.'
            )
        else:
            # –û–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
            result_text += "üí° <b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:</b>\n"

            if bmi < 18.5:
                result_text += '–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø—Ä–æ–∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è —Å <a href="tg://user?id={DOCTOR_ID}">–≤—Ä–∞—á–æ–º</a> –æ –Ω–∞–±–æ—Ä–µ –≤–µ—Å–∞.'
            elif 18.5 <= bmi < 25:
                result_text += "–û—Ç–ª–∏—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç! –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–π—Ç–µ —Ç–µ–∫—É—â–∏–π –≤–µ—Å."
            elif 25 <= bmi < 30:
                result_text += '–ò–∑–±—ã—Ç–æ—á–Ω–∞—è –º–∞—Å—Å–∞ —Ç–µ–ª–∞. –í–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è —Å <a href="tg://user?id={DOCTOR_ID}">—ç–Ω–¥–æ–∫—Ä–∏–Ω–æ–ª–æ–≥–æ–º –Ω–∞—à–µ–π –∫–æ–º–∞–Ω–¥—ã.</a>'

        await message.answer(
            result_text,
            parse_mode="HTML",
            reply_markup=get_ok_keyboard()
        )

        await state.clear()

    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ä–æ—Å—Ç —á–∏—Å–ª–æ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä: 175 –∏–ª–∏ 175.5):")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ OK
@dp.callback_query(lambda c: c.data == "ok")
async def process_ok(callback_query: types.CallbackQuery):
    await callback_query.message.answer(
        "–ò–∑–º–µ—Ä–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –•–æ—Ç–∏—Ç–µ –∏–∑–º–µ—Ä–∏—Ç—å –ò–ú–¢ —Å–Ω–æ–≤–∞?",
        reply_markup=get_start_keyboard()
    )
    await callback_query.answer()


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())