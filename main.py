import os
import time

from dotenv import load_dotenv
import telebot
from flask import Flask, request
from telebot import types


server = Flask(__name__)

load_dotenv()

# WEBHOOK_URL_BASE = os.getenv("WEBHOOK_URL_BASE")
# if not WEBHOOK_URL_BASE:
#     raise ValueError("WEBHOOK_URL_BASE –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")

BOT_TOKEN = os.getenv("BOT_TOKEN")
if not BOT_TOKEN:
    raise ValueError("BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")

DOCTOR_ID = os.getenv("DOCTOR_ID")
if not DOCTOR_ID:
    raise ValueError("DOCTOR_ID –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = telebot.TeleBot(BOT_TOKEN)

# –í–º–µ—Å—Ç–æ FSM –±—É–¥–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–æ—Å—Ç—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
user_data = {}


# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def get_start_keyboard():
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton(text="–ò–∑–º–µ—Ä–∏—Ç—å –ò–ú–¢", callback_data="measure_bmi"))
    return keyboard


def get_ok_keyboard():
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton(text="OK", callback_data="ok"))
    return keyboard


def get_cancel_keyboard():
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="cancel"))
    return keyboard


# –§—É–Ω–∫—Ü–∏–∏ —Ä–∞—Å—á–µ—Ç–∞ (–æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
def calculate_bmi(weight, height):
    height_m = height / 100
    bmi = weight / (height_m ** 2)

    if bmi < 16:
        category = "–í—ã—Ä–∞–∂–µ–Ω–Ω—ã–π –¥–µ—Ñ–∏—Ü–∏—Ç –º–∞—Å—Å—ã —Ç–µ–ª–∞"
    elif 16 <= bmi < 18.5:
        category = "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–∞—è –º–∞—Å—Å–∞ —Ç–µ–ª–∞"
    elif 18.5 <= bmi < 25:
        category = "–ù–æ—Ä–º–∞–ª—å–Ω–∞—è –º–∞—Å—Å–∞ —Ç–µ–ª–∞"
    elif 25 <= bmi < 30:
        category = "–ò–∑–±—ã—Ç–æ—á–Ω–∞—è –º–∞—Å—Å–∞ —Ç–µ–ª–∞"
    elif 30 <= bmi < 35:
        category = "–û–∂–∏—Ä–µ–Ω–∏–µ 1 —Å—Ç–µ–ø–µ–Ω–∏"
    elif 35 <= bmi < 40:
        category = "–û–∂–∏—Ä–µ–Ω–∏–µ 2 —Å—Ç–µ–ø–µ–Ω–∏"
    else:
        category = "–û–∂–∏—Ä–µ–Ω–∏–µ 3 —Å—Ç–µ–ø–µ–Ω–∏"

    return round(bmi, 2), category


def calculate_weight_plan(current_weight, height):
    height_m = height / 100
    ideal_weight = 24 * (height_m ** 2)
    excess_weight = current_weight - ideal_weight
    min_weight_loss = excess_weight * 0.6
    max_weight_loss = excess_weight * 0.8
    return ideal_weight, excess_weight, min_weight_loss, max_weight_loss


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@bot.message_handler(commands=['start'])
def cmd_start(message):
    welcome_text = (
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –ò–Ω–¥–µ–∫—Å–∞ –ú–∞—Å—Å—ã –¢–µ–ª–∞ (–ò–ú–¢)!\n\n"
        "üìä <b>–ß—Ç–æ —Ç–∞–∫–æ–µ –ò–ú–¢?</b>\n"
        "–ò–ú–¢ - —ç—Ç–æ –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –≤–µ—Å–∞ –∏ —Ä–æ—Å—Ç–∞ —á–µ–ª–æ–≤–µ–∫–∞, "
        "–∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–≥–∞–µ—Ç –æ—Ü–µ–Ω–∏—Ç—å, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –º–∞—Å—Å–∞ —Ç–µ–ª–∞ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–π, "
        "–Ω–æ—Ä–º–∞–ª—å–Ω–æ–π –∏–ª–∏ –∏–∑–±—ã—Ç–æ—á–Ω–æ–π.\n\n"
        "üí° <b>–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç?</b>\n"
        "1. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–ò–∑–º–µ—Ä–∏—Ç—å –ò–ú–¢'\n"
        "2. –í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –≤–µ—Å –≤ –∫–∏–ª–æ–≥—Ä–∞–º–º–∞—Ö\n"
        "3. –í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π —Ä–æ—Å—Ç –≤ —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä–∞—Ö\n"
        "4. –ü–æ–ª—É—á–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–µ–π\n\n"
        "üöÄ <b>–ù–∞—á–Ω–∏—Ç–µ —Å–µ–π—á–∞—Å!</b>"
    )
    bot.send_message(
        message.chat.id,
        welcome_text,
        parse_mode='HTML',
        reply_markup=get_start_keyboard()
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–ò–∑–º–µ—Ä–∏—Ç—å –ò–ú–¢"
@bot.callback_query_handler(func=lambda call: call.data == 'measure_bmi')
def process_measure_bmi(call):
    try:
        bot.edit_message_reply_markup(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            reply_markup=None
        )
    except:
        pass

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_data[call.from_user.id] = {'state': 'waiting_weight'}

    bot.send_message(
        call.message.chat.id,
        "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–µ—Å –≤ –∫–∏–ª–æ–≥—Ä–∞–º–º–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä: 65):",
        reply_markup=get_cancel_keyboard()
    )
    bot.answer_callback_query(call.id)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã
@bot.callback_query_handler(func=lambda call: call.data == 'cancel')
def process_cancel(call):
    if call.from_user.id in user_data:
        del user_data[call.from_user.id]

    try:
        bot.edit_message_text(
            "–ò–∑–º–µ—Ä–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ:",
            call.message.chat.id,
            call.message.message_id,
            reply_markup=get_start_keyboard()
        )
    except:
        bot.send_message(
            call.message.chat.id,
            "–ò–∑–º–µ—Ä–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ:",
            reply_markup=get_start_keyboard()
        )
    bot.answer_callback_query(call.id)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –≤–µ—Å–∞
@bot.message_handler(func=lambda message: user_data.get(message.from_user.id, {}).get('state') == 'waiting_weight')
def process_weight(message):
    try:
        weight = float(message.text.replace(',', '.'))
        if weight <= 0 or weight > 300:
            bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–µ—Å (–æ—Ç 1 –¥–æ 300 –∫–≥):")
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–µ—Å –∏ –º–µ–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        user_data[message.from_user.id] = {
            'state': 'waiting_height',
            'weight': weight
        }

        bot.send_message(
            message.chat.id,
            "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ä–æ—Å—Ç –≤ —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä: 175):",
            reply_markup=get_cancel_keyboard()
        )

    except ValueError:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–µ—Å —á–∏—Å–ª–æ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä: 65 –∏–ª–∏ 65.5):")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ —Ä–æ—Å—Ç–∞
@bot.message_handler(func=lambda message: user_data.get(message.from_user.id, {}).get('state') == 'waiting_height')
def process_height(message):
    try:
        height = float(message.text.replace(',', '.'))
        if height <= 0 or height > 250:
            bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ä–æ—Å—Ç (–æ—Ç 1 –¥–æ 250 —Å–º):")
            return

        # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        user_info = user_data.get(message.from_user.id, {})
        weight = user_info.get('weight')

        if not weight:
            bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –æ –≤–µ—Å–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
            del user_data[message.from_user.id]
            return

        # –†–∞—Å—á–µ—Ç –ò–ú–¢
        bmi, category = calculate_bmi(weight, height)

        result_text = (
            f"üìä <b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞—Å—á–µ—Ç–∞ –ò–ú–¢:</b>\n\n"
            f"‚öñÔ∏è –í–µ—Å: {weight} –∫–≥\n"
            f"üìè –†–æ—Å—Ç: {height} —Å–º\n"
            f"üî¢ –ò–ú–¢: {bmi}\n"
            f"üìà –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}\n\n"
        )

        if bmi >= 30:
            ideal_weight, excess_weight, min_weight_loss, max_weight_loss = calculate_weight_plan(weight, height)
            result_text += (
                f"üéØ <b>–ò–¥–µ–∞–ª—å–Ω—ã–π –≤–µ—Å:</b> {ideal_weight:.1f} –∫–≥\n"
                f"üìä <b>–ò–∑–±—ã—Ç–æ–∫ –≤–µ—Å–∞:</b> {excess_weight:.1f} –∫–≥\n\n"
                f"üìã <b>–ü–ª–∞–Ω–∏—Ä—É–µ–º–æ–µ —Å–Ω–∏–∂–µ–Ω–∏–µ –≤–µ—Å–∞ –ø–æ—Å–ª–µ –æ–ø–µ—Ä–∞—Ü–∏–∏:</b> "
                f"{min_weight_loss:.1f} - {max_weight_loss:.1f} –∫–≥\n"
                f"<i>(60-80% –æ—Ç –∏–∑–±—ã—Ç–æ—á–Ω–æ–≥–æ –≤–µ—Å–∞)</i>\n\n"
                f"üí° <b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:</b>\n"
                f'–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø—Ä–æ–∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è —Å <a href="tg://user?id={DOCTOR_ID}">–≤—Ä–∞—á–æ–º</a> –æ –ø—Ä–æ–≥—Ä–∞–º–º–µ —Å–Ω–∏–∂–µ–Ω–∏—è –≤–µ—Å–∞.'
            )
        else:
            result_text += "üí° <b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:</b>\n"
            if bmi < 18.5:
                result_text += f'–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø—Ä–æ–∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è —Å <a href="tg://user?id={DOCTOR_ID}">–≤—Ä–∞—á–æ–º</a> –æ –Ω–∞–±–æ—Ä–µ –≤–µ—Å–∞.'
            elif 18.5 <= bmi < 25:
                result_text += "–û—Ç–ª–∏—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç! –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–π—Ç–µ —Ç–µ–∫—É—â–∏–π –≤–µ—Å."
            elif 25 <= bmi < 30:
                result_text += f'–ò–∑–±—ã—Ç–æ—á–Ω–∞—è –º–∞—Å—Å–∞ —Ç–µ–ª–∞. –í–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è —Å <a href="tg://user?id={DOCTOR_ID}">—ç–Ω–¥–æ–∫—Ä–∏–Ω–æ–ª–æ–≥–æ–º –Ω–∞—à–µ–π –∫–æ–º–∞–Ω–¥—ã.</a>'

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        bot.send_message(
            message.chat.id,
            result_text,
            parse_mode='HTML',
            reply_markup=get_ok_keyboard()
        )

        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        del user_data[message.from_user.id]

    except ValueError:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ä–æ—Å—Ç —á–∏—Å–ª–æ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä: 175 –∏–ª–∏ 175.5):")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ OK
@bot.callback_query_handler(func=lambda call: call.data == 'ok')
def process_ok(call):
    bot.send_message(
        call.message.chat.id,
        "–ò–∑–º–µ—Ä–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –•–æ—Ç–∏—Ç–µ –∏–∑–º–µ—Ä–∏—Ç—å –ò–ú–¢ —Å–Ω–æ–≤–∞?",
        reply_markup=get_start_keyboard()
    )
    bot.answer_callback_query(call.id)

# @server.route('/' + BOT_TOKEN, methods=['POST'])
# def getMessage():
#     json_string = request.get_data().decode('utf-8')
#     update = telebot.types.Update.de_json(json_string)
#     bot.process_new_updates([update])
#     return "!", 200

@server.route('/healthcheck',  methods=['GET'])
def healthcheck():
    return {"status": "alive"}, 200

# bot.remove_webhook()
#
# time.sleep(1)
#
# # Set webhook
# bot.set_webhook(url=f"{WEBHOOK_URL_BASE}/{BOT_TOKEN}")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    server.run(host="0.0.0.0", port=int(os.environ.get('PORT', 5000)))